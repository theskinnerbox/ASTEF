'use strict';

import NearestNeighborIndexProcessor from '../src/Processors/NearestNeighborIndexProcessor';
import { assert } from 'chai';

var processor = new NearestNeighborIndexProcessor();

describe('NearestNeighborIndexProcessor', function() {
    describe('calculateNNI()', function () {
        it('can correctly calculate the nearest neighbor index #1', function () {
            var output = processor.calculate([
                [0, 0.866], [0.5, 1.732], [1.5, 1.732], [2, 0.866], [1.5, 0], [0.5, 0]
            ]);

            assert.equal(3.039, parseFloat(output.nni[0]).toFixed(3));
            assert.equal(2.592, parseFloat(output.nni[1]).toFixed(3));
        });

        it('can correctly calculate the nearest neighbor index #2', function () {
            var output = processor.calculate([[0.6781,0.2419],[0.0525,0.7598],[0.8012,0.2909],[0.6786,0.2774],[0.9460,0.0061],[0.0916,0.3747],[0.9084,0.4369],[0.5100,0.3043],[0.6149,0.2909],[0.3161,0.2425],[0.0775,0.9367],[0.8506,0.8602],[0.1445,0.3972],[0.3705,0.4794],[0.6224,0.5650],[0.9976,0.4896],[0.5173,0.2698],[0.9905,0.9897],[0.2265,0.1837],[0.3980,0.8617],[0.6966,0.0326],[0.0646,0.3320],[0.7477,0.7487],[0.4204,0.6444],[0.8113,0.1692],[0.3796,0.9522],[0.3191,0.5433],[0.9861,0.2514],[0.7182,0.5786],[0.4132,0.9155],[0.0986,0.8956],[0.7346,0.4825],[0.6373,0.4427],[0.0738,0.3118],[0.1205,0.0553],[0.9816,0.7538],[0.4968,0.1319],[0.0224,0.3559],[0.0538,0.3959],[0.1409,0.8855],[0.8935,0.0212],[0.4658,0.8441],[0.5609,0.2881],[0.4945,0.2503],[0.0678,0.4884],[0.8976,0.7290],[0.2886,0.2026],[0.2690,0.2163],[0.5942,0.9763],[0.4759,0.5932],[0.3683,0.3044],[0.6556,0.9677],[0.9382,0.8960],[0.6204,0.1900],[0.2828,0.0018],[0.2052,0.7118],[0.4391,0.8677],[0.0273,0.1183],[0.8762,0.0390],[0.6101,0.5982],[0.2036,0.6043],[0.5199,0.5164],[0.0538,0.0075],[0.8622,0.6889],[0.4429,0.9460],[0.5480,0.8735],[0.5669,0.1133],[0.6804,0.3546],[0.3714,0.2419],[0.0782,0.5603],[0.4564,0.6127],[0.0478,0.3008],[0.7383,0.7981],[0.0380,0.7956],[0.9542,0.7811],[0.7424,0.3511],[0.9374,0.0543],[0.5134,0.7087],[0.2409,0.9929],[0.2600,0.1625],[0.7590,0.1136],[0.9933,0.9129],[0.3567,0.4817],[0.7529,0.8518],[0.1100,0.8099],[0.5970,0.1868],[0.4306,0.2472],[0.7307,0.0542],[0.2612,0.6090],[0.0948,0.7772],[0.4510,0.5111],[0.6401,0.0278],[0.1320,0.9904],[0.4528,0.5009],[0.6522,0.3320],[0.8270,0.1739],[0.3081,0.6256],[0.4024,0.5751],[0.8842,0.7510],[0.7006,0.1535]]);

            assert.equal(1.110, parseFloat(output.nni[0]).toFixed(3));
            assert.equal(1.073, parseFloat(output.nni[1]).toFixed(3));
        });

        it('can correctly calculate the nearest neighbor index #3', function () {
            var output = processor.calculate([[10.4967,10.4633],[10.8651,10.8208],[10.0680,10.9519],[10.9685,10.0763],[10.0988,10.7087],[10.5470,10.2349],[10.4030,10.3989],[10.1070,10.2681],[10.7242,10.8325],[10.6137,10.9954],[10.7830,10.6498],[10.5666,10.7040],[10.8113,10.9323],[10.5768,10.6877],[10.9440,10.5684],[10.8715,10.3808],[10.5076,10.6346],[10.7888,10.3632],[10.4730,10.4076],[10.8288,10.3687],[10.3225,10.4684],[10.9761,10.5034],[10.2782,10.9105],[10.0728,10.2064],[10.7512,10.3386],[10.8312,10.5741],[10.9223,10.4869],[10.3270,10.2622],[10.8041,10.5796],[10.5383,10.8783],[20.0610,20.9812],[20.4409,20.8620],[20.0843,20.0838],[20.5632,20.3377],[20.5393,20.2361],[20.7681,20.3178],[20.2331,20.9844],[20.5874,20.5483],[20.4590,20.7493],[20.8610,20.8419],[20.6608,20.1669],[20.3539,20.9031],[20.3472,20.1051],[20.2537,20.7451],[20.9525,20.7294],[20.2982,20.7175],[20.1584,20.1334],[20.3613,20.4458],[20.7416,20.5088],[20.7059,20.5305],[20.7009,20.8597],[20.0062,20.6777],[20.3743,20.8058],[20.9015,20.5312],[20.3183,20.9559],[20.5971,20.0667],[20.2978,20.5415],[20.1250,20.2817],[20.3884,20.4809],[20.8177,20.6849],[30.2083,30.7357],[30.6082,30.4113],[30.3262,30.8290],[30.8808,30.9351],[30.1334,30.3991],[30.1024,30.0522],[30.9591,30.5712],[30.1529,30.7477],[30.1525,30.3202],[30.1556,30.4929],[30.0896,30.2217],[30.4544,30.9393],[30.6689,30.4823],[30.8313,30.5400],[30.7902,30.2211],[30.7127,30.0959],[30.4726,30.0602],[30.7086,30.8195],[30.9581,30.7715],[30.5058,30.1957],[30.3051,30.8951],[30.7898,30.6843],[30.2364,30.6568],[30.2343,30.9904],[30.4647,30.0337],[30.6194,30.4243],[30.6153,30.4900],[30.1226,30.5835],[30.1238,30.0833],[30.2845,30.6602]]);

            assert.equal(0.334, parseFloat(output.nni[0]).toFixed(3));
            assert.equal(0.298, parseFloat(output.nni[1]).toFixed(3));
        });
    });

    describe('calculateAverageDistance()', function () {
        it('can correctly calculate average distance #1', function () {
            assert.equal(1, processor.calculateAverageDistance([
                [0, 0], [1, 0], [0, 1]
            ]));
        });

        it('can correctly calculate average distance #2', function () {
            assert.equal(1, processor.calculateAverageDistance([
                [0, 0], [1, 0], [1,1], [0, 1]
            ]));
        });
    });
});
